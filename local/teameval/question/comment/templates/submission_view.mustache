<div class="teamevalquestion-comment-container" id="teamevalquestion-comment-{{uniqid}}">
<h3>{{title}}</h3>
<div class="description">{{description}}</div>
<table class="comments">
{{#users}}
    <tr{{#self}} class="self"{{/self}}>
        <th scope="row">{{name}}</th>
        <td>
            {{#locked}}
            {{comment}}
            {{^comment}}
            <div class="nocomment">
            {{#str}} nocomment, teamevalquestion_comment {{/str}}
            </div>
            {{/comment}}
            {{/locked}}
            {{^locked}}
            <textarea id="teamevalquestion-comment-for-{{userid}}-{{uniqid}}" rows="3" data-touser="{{userid}}">{{comment}}</textarea>
            {{/locked}}
        </td>
    </tr>
{{/users}}
</table>
<div class="incomplete-indicator">{{#str}} incompleteadvice, local_teameval {{/str}}</div>
</div>
{{#js}}
{{#_notset}}<script>{{/_notset}}

require(['jquery', 'core/ajax', 'core/notification'], function($, ajax, notification) {

    

    var questionContainer = $('#teamevalquestion-comment-{{uniqid}}').closest('.question-container');
    var thisQuestion = $('#teamevalquestion-comment-{{uniqid}}');

    {{^locked}}
    function checkComplete() {
        var incomplete = thisQuestion.find('textarea').filter(function() {
            return $(this).val().trim().length == 0;
        });

        if (incomplete.length > 0) {
            questionContainer.parent().addClass('incomplete');
        } else {
            questionContainer.parent().removeClass('incomplete');
        }
    }
    {{/locked}}

    {{#incomplete}}
    questionContainer.parent().addClass('incomplete');
    {{/incomplete}}

    questionContainer.on('submit', function () {

        var comments = [];
        thisQuestion.find('.comments textarea').each(function(v, k) {
            var toUser = $(this).data('touser');
            var m = {};
            m.touser = toUser;
            m.comment = $(this).val();
            comments.push(m);
        });

        var promises = ajax.call([{
            methodname: 'teamevalquestion_comment_submit_response',
            args: {
                cmid: {{_cmid}},
                id: {{id}},
                comments: comments
            }
        }]);

        checkComplete();

        return promises[0];

    });

    questionContainer.on("delete", function () {
        var promises = ajax.call([{
            methodname: 'teamevalquestion_comment_delete_question',
            args: {
                cmid: {{_cmid}},
                id: {{id}}
            }
        }]);

        return promises[0];
    });

});

{{/js}}